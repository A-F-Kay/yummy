/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BasicErrResponse
 */
export interface BasicErrResponse {
    /**
     * 
     * @type {BasicResult}
     * @memberof BasicErrResponse
     */
    detail: BasicResult;
}
/**
 * 
 * @export
 * @interface BasicResult
 */
export interface BasicResult {
    /**
     * 
     * @type {boolean}
     * @memberof BasicResult
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof BasicResult
     */
    message: string;
}
/**
 * 
 * @export
 * @interface CurrentUserModel
 */
export interface CurrentUserModel {
    /**
     * 
     * @type {number}
     * @memberof CurrentUserModel
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserModel
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserModel
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof CurrentUserModel
     */
    age?: number;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserModel
     */
    email: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserModel
     */
    is_admin?: boolean;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    access_token: string;
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    token_type?: string;
}
/**
 * 
 * @export
 * @interface UserModel
 */
export interface UserModel {
    /**
     * 
     * @type {number}
     * @memberof UserModel
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof UserModel
     */
    age?: number;
}
/**
 * 
 * @export
 * @interface UserModelCreate
 */
export interface UserModelCreate {
    /**
     * 
     * @type {string}
     * @memberof UserModelCreate
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelCreate
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelCreate
     */
    password: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsersTokenPost: async (username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginUsersTokenPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginUsersTokenPost', 'password', password)
            const localVarPath = `/users/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUsersTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUsersTokenPost(username, password, grantType, scope, clientId, clientSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsersTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): AxiosPromise<TokenResponse> {
            return localVarFp.loginUsersTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for loginUsersTokenPost operation in AuthApi.
 * @export
 * @interface AuthApiLoginUsersTokenPostRequest
 */
export interface AuthApiLoginUsersTokenPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthApiLoginUsersTokenPost
     */
    readonly username: string

    /**
     * 
     * @type {string}
     * @memberof AuthApiLoginUsersTokenPost
     */
    readonly password: string

    /**
     * 
     * @type {string}
     * @memberof AuthApiLoginUsersTokenPost
     */
    readonly grantType?: string

    /**
     * 
     * @type {string}
     * @memberof AuthApiLoginUsersTokenPost
     */
    readonly scope?: string

    /**
     * 
     * @type {string}
     * @memberof AuthApiLoginUsersTokenPost
     */
    readonly clientId?: string

    /**
     * 
     * @type {string}
     * @memberof AuthApiLoginUsersTokenPost
     */
    readonly clientSecret?: string
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Login
     * @param {AuthApiLoginUsersTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginUsersTokenPost(requestParameters: AuthApiLoginUsersTokenPostRequest, options?: any) {
        return AuthApiFp(this.configuration).loginUsersTokenPost(requestParameters.username, requestParameters.password, requestParameters.grantType, requestParameters.scope, requestParameters.clientId, requestParameters.clientSecret, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SocialApi - axios parameter creator
 * @export
 */
export const SocialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeUsersGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/@`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsersUsernameGet: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserUsersUsernameGet', 'username', username)
            const localVarPath = `/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsersTokenPost: async (username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginUsersTokenPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginUsersTokenPost', 'password', password)
            const localVarPath = `/users/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register User
         * @param {UserModelCreate} userModelCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUserUsersRegisterPost: async (userModelCreate: UserModelCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userModelCreate' is not null or undefined
            assertParamExists('registerUserUsersRegisterPost', 'userModelCreate', userModelCreate)
            const localVarPath = `/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userModelCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Users List
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersListUsersGet: async (limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SocialApi - functional programming interface
 * @export
 */
export const SocialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SocialApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeUsersGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeUsersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get User
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsersUsernameGet(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserUsersUsernameGet(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUsersTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUsersTokenPost(username, password, grantType, scope, clientId, clientSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register User
         * @param {UserModelCreate} userModelCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUserUsersRegisterPost(userModelCreate: UserModelCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasicResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUserUsersRegisterPost(userModelCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Users List
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersListUsersGet(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersListUsersGet(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SocialApi - factory interface
 * @export
 */
export const SocialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SocialApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeUsersGet(options?: any): AxiosPromise<CurrentUserModel> {
            return localVarFp.getMeUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsersUsernameGet(username: string, options?: any): AxiosPromise<UserModel> {
            return localVarFp.getUserUsersUsernameGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsersTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): AxiosPromise<TokenResponse> {
            return localVarFp.loginUsersTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register User
         * @param {UserModelCreate} userModelCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUserUsersRegisterPost(userModelCreate: UserModelCreate, options?: any): AxiosPromise<BasicResult> {
            return localVarFp.registerUserUsersRegisterPost(userModelCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Users List
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersListUsersGet(limit?: number, offset?: number, options?: any): AxiosPromise<Array<UserModel>> {
            return localVarFp.usersListUsersGet(limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserUsersUsernameGet operation in SocialApi.
 * @export
 * @interface SocialApiGetUserUsersUsernameGetRequest
 */
export interface SocialApiGetUserUsersUsernameGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SocialApiGetUserUsersUsernameGet
     */
    readonly username: string
}

/**
 * Request parameters for loginUsersTokenPost operation in SocialApi.
 * @export
 * @interface SocialApiLoginUsersTokenPostRequest
 */
export interface SocialApiLoginUsersTokenPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SocialApiLoginUsersTokenPost
     */
    readonly username: string

    /**
     * 
     * @type {string}
     * @memberof SocialApiLoginUsersTokenPost
     */
    readonly password: string

    /**
     * 
     * @type {string}
     * @memberof SocialApiLoginUsersTokenPost
     */
    readonly grantType?: string

    /**
     * 
     * @type {string}
     * @memberof SocialApiLoginUsersTokenPost
     */
    readonly scope?: string

    /**
     * 
     * @type {string}
     * @memberof SocialApiLoginUsersTokenPost
     */
    readonly clientId?: string

    /**
     * 
     * @type {string}
     * @memberof SocialApiLoginUsersTokenPost
     */
    readonly clientSecret?: string
}

/**
 * Request parameters for registerUserUsersRegisterPost operation in SocialApi.
 * @export
 * @interface SocialApiRegisterUserUsersRegisterPostRequest
 */
export interface SocialApiRegisterUserUsersRegisterPostRequest {
    /**
     * 
     * @type {UserModelCreate}
     * @memberof SocialApiRegisterUserUsersRegisterPost
     */
    readonly userModelCreate: UserModelCreate
}

/**
 * Request parameters for usersListUsersGet operation in SocialApi.
 * @export
 * @interface SocialApiUsersListUsersGetRequest
 */
export interface SocialApiUsersListUsersGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SocialApiUsersListUsersGet
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof SocialApiUsersListUsersGet
     */
    readonly offset?: number
}

/**
 * SocialApi - object-oriented interface
 * @export
 * @class SocialApi
 * @extends {BaseAPI}
 */
export class SocialApi extends BaseAPI {
    /**
     * 
     * @summary Get Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public getMeUsersGet(options?: any) {
        return SocialApiFp(this.configuration).getMeUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User
     * @param {SocialApiGetUserUsersUsernameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public getUserUsersUsernameGet(requestParameters: SocialApiGetUserUsersUsernameGetRequest, options?: any) {
        return SocialApiFp(this.configuration).getUserUsersUsernameGet(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {SocialApiLoginUsersTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public loginUsersTokenPost(requestParameters: SocialApiLoginUsersTokenPostRequest, options?: any) {
        return SocialApiFp(this.configuration).loginUsersTokenPost(requestParameters.username, requestParameters.password, requestParameters.grantType, requestParameters.scope, requestParameters.clientId, requestParameters.clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register User
     * @param {SocialApiRegisterUserUsersRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public registerUserUsersRegisterPost(requestParameters: SocialApiRegisterUserUsersRegisterPostRequest, options?: any) {
        return SocialApiFp(this.configuration).registerUserUsersRegisterPost(requestParameters.userModelCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Users List
     * @param {SocialApiUsersListUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialApi
     */
    public usersListUsersGet(requestParameters: SocialApiUsersListUsersGetRequest = {}, options?: any) {
        return SocialApiFp(this.configuration).usersListUsersGet(requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
}


